Jenetics-4.3.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/347: Improve `hashCode` and `equals` methods.
    * https://github.com/jenetics/jenetics/issues/349: Cleanup of chromosome constructors. Make the constructors more regular.
    * https://github.com/jenetics/jenetics/issues/355: Simplify implementation of numeric genes.
    * https://github.com/jenetics/jenetics/issues/361: Add `NumericChromosome.primitiveStream()` methods.
    * https://github.com/jenetics/jenetics/issues/366: Deprecate reference to fitness function property from `Phenotype`. Preparation step for generalizing the fitness evaluation.
    * https://github.com/jenetics/jenetics/issues/377: Add `Tree.childAt` method. Lets you fetch deeply nested child nodes.
    * https://github.com/jenetics/jenetics/issues/378: Convert tree to parentheses tree string.
    * https://github.com/jenetics/jenetics/issues/379: Parse parentheses tree string to tree object.
    * https://github.com/jenetics/jenetics/issues/380: Add `TreeNode.map` method.
    * https://github.com/jenetics/jenetics/issues/400: Codec for mapping source- and target objects.
    * https://github.com/jenetics/jenetics/issues/406: Make the library compilable under Java 11.
    * https://github.com/jenetics/jenetics/issues/411: Improve the behaviour of the `MathExpr.format` method.

- Bug fixes

    * https://github.com/jenetics/jenetics/issues/357: Invalid length of selected population in `MonteCarloSelector`.
    * https://github.com/jenetics/jenetics/issues/420: `Limits.byFitnessThreshold` termination strategy is missing _best_ generation.

Jenetics-4.2.1

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/416: Method internal `comb.subset` doesn't create all possible combinations. The `PermutationChromosome` is therefore not able to create solutions for the whole search space.


Jenetics-4.2.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/325: **Allow customization of fitness evaluation execution for bundling calculations**
    * https://github.com/jenetics/jenetics/issues/327: Improve CPU utilization during fitness evaluation.
    * https://github.com/jenetics/jenetics/issues/335: Seq view wrapper for List<T> and T[] types.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/317: Fix links of Javadoc images.
    * https://github.com/jenetics/jenetics/issues/318: NULL result from engine.stream() after upgrade from 4.0.0 to 4.1.0.
    * https://github.com/jenetics/jenetics/issues/336: Errornous default implementation of 'Seq.indexWhere'.
    * https://github.com/jenetics/jenetics/issues/341: Error in internal 'bit.increment' method.
    * https://github.com/jenetics/jenetics/issues/345: Assumption for 'Genotype.newInstance(ISeq)' no longer holds.


Jenetics-4.1.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/223: **Implementation of Multi-Objective Optimization.**
    * https://github.com/jenetics/jenetics/issues/259: Pruning GP program tree.
    * https://github.com/jenetics/jenetics/issues/285: Population exchange between different Engines.
    * https://github.com/jenetics/jenetics/issues/294: Cleanup of Jenetics examples.
    * https://github.com/jenetics/jenetics/issues/295: Upgrade Gradle version 4.5.
    * https://github.com/jenetics/jenetics/issues/297: Compile JMH test on test execution.
    * https://github.com/jenetics/jenetics/issues/306: Improve Javadoc on how to extend chromosomes.
    * https://github.com/jenetics/jenetics/issues/307: Enable @apiNote, @implSpec and @implNote Javadoc tag.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/290: User's manual fixes.
    * https://github.com/jenetics/jenetics/issues/298: Fix GP load/save of generated tree.


Jenetics-4.0.0

- Improvements

    * https://github.com/jenetics/jenetics/issues/28: Immutable population class. The original `Population` class has been replaced by `Seq<Phenotype<G, C>>`. This points to a more _functional_ implementation of the library.
    * https://github.com/jenetics/jenetics/issues/119: `Chromosome` implementations are now fully immutable. This is an internal change only.
    * https://github.com/jenetics/jenetics/issues/121: `Mutator` class is easier now to extend. It has been extended with additional `mutate` methods which serves as extension points for onw `Mutator` implementations.
    * https://github.com/jenetics/jenetics/issues/123: `Chromosome` with variable number of genes: Most chromosomes can now be created with a variable number of genes. `DoubleChromosome.of(0.0, 1.0, IntRange.of(5, 16))`.
    * https://github.com/jenetics/jenetics/issues/172: [`io.jenetics.prngine`](https://github.com/jenetics/prngine) library replaces the existing PRNG implementations in the `io.jenetics.base` module.
    * https://github.com/jenetics/jenetics/issues/175: Align random int range generation with `io.jenetics.prngine` library. This is an internal change only.
    * https://github.com/jenetics/jenetics/issues/180: Change library namespace from `org.jenetics` to `io.jenetics`. This is the **most** invasive change of this release. Users have to adopt the imports in all their code.
    * https://github.com/jenetics/jenetics/issues/183: Change copyright email address to ...@gmail.com
    * https://github.com/jenetics/jenetics/issues/200: Implementation of gene convergence termination: _A termination method that stops the evolution when a user-specified percentage of the genes that make up a `Genotype` are deemed as converged. A gene is deemed as converged when the average value of that gene across all of the genotypes in the current population is less than a user-specified percentage away from the maximum gene value across the genotypes._
    * https://github.com/jenetics/jenetics/issues/253: Removal of deprecated code and classes: mainly `JAXB` marshalling and the `LCG64ShiftRandom` class.
    * https://github.com/jenetics/jenetics/issues/260: Clean room implementation of internal `subset` function. This method was a port from the [C++ source](https://people.scs.fsu.edu/~burkardt/c_src/subset/subset.html) written by John Burkardt. The original source has been published under the LGPL licence, which is not compatible to tha Apache 2 licence. To avoid legal issues, the affected method has been reimplemented using the [Clean Room](http://wiki.c2.com/?CleanRoomImplementation) method, based on the original book, [Combinatorial Algorithms for Computers and Calculators](https://www.math.upenn.edu/%7Ewilf/website/CombinatorialAlgorithms.pdf), by Albert Nijenhuis and Herbert Wilf. The `io.jenetics.internal.math.comb.subset` method is now fully compatible with the Apache 2 licence.
    * https://github.com/jenetics/jenetics/issues/262: Filter for duplicate individuals: It is now possible to intercept the stream of `EvolutionResult`s of the evolution `Engine`:
```java
final Engine<DoubleGene, Integer> engine = Engine.builder(problem)
	.mapping(EvolutionResult.toUniquePopulation())
	.build();
```
    * https://github.com/jenetics/jenetics/issues/264: Upgrade Gradle to version 4.3.
    * https://github.com/jenetics/jenetics/issues/266: The `Seq` serialization should be more robust in the case of implementation changes.
    * https://github.com/jenetics/jenetics/issues/269: Implementation of an [`EliteSelector`](https://en.wikipedia.org/wiki/Selection_(genetic_algorithm)).
    * https://github.com/jenetics/jenetics/issues/269: Cleanup of internal, mathematical helper functions.
    * https://github.com/jenetics/jenetics/issues/272: Obey Java naming convention. Two helper classes have been renamed to obey the Java naming conventions. `codecs` -> `Codecs` and `limits` -> `Limits`.
    * https://github.com/jenetics/jenetics/issues/279: Additional `MSeq.swap` method.

- Bugs

    * (https://github.com/jenetics/jenetics/issues/247: Fix the classpath of the `jrun` helper script.
    * https://github.com/jenetics/jenetics/issues/256: Buggy type signature of `AnyChromosome.of` method.

Jenetics-3.9.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/26: Extend Gradle scripts for multi-module releases.
    * https://github.com/jenetics/jenetics/issues/27: Parallel `EvolutionStream`.
    * https://github.com/jenetics/jenetics/issues/64: Implementation of `TreeGene`/`Chromosome`.
    * https://github.com/jenetics/jenetics/issues/181: XML marshaling module: `org.jenetics.xml`.
    * https://github.com/jenetics/jenetics/issues/199: Termination: Population convergence.
    * https://github.com/jenetics/jenetics/issues/201: Simplify Gradle build scripts.
    * https://github.com/jenetics/jenetics/issues/204: Remove internal `Stack` container class.
    * https://github.com/jenetics/jenetics/issues/207: Add missing `BitChromosome` factory methods.
    * https://github.com/jenetics/jenetics/issues/216: Restructuring of User's Manual.
    * https://github.com/jenetics/jenetics/issues/218: Mark `LCG64ShiftRandom` class as deprecated.
    * https://github.com/jenetics/jenetics/issues/219: Mark `JAXB` marshaling as deprecated.
    * https://github.com/jenetics/jenetics/issues/227: Genetic Programming module: `org.jenetics.prog`.
    * https://github.com/jenetics/jenetics/issues/228: Upgrade Gradle to 4.0.2.
    * https://github.com/jenetics/jenetics/issues/229: Define stable module names.
    * https://github.com/jenetics/jenetics/issues/236: Rename module `jenetix` to `org.jenetics.ext`
    * https://github.com/jenetics/jenetics/issues/238: Align project directories with maven artifact names.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/212): Fix `Seq.toArray(Object[])` method.
    * https://github.com/jenetics/jenetics/pull/226): Incorrect `MinMax.toString()` output.
    * https://github.com/jenetics/jenetics/pull/233): `Engine.java` Comment Grammar Fix.
    * https://github.com/jenetics/jenetics/issues/234): `Population.empty()` isn't empty

Jenetics-3.8.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/157: Add `LineCrossover` class.
    * https://github.com/jenetics/jenetics/issues/158: Add `IntermediateCrossover` class.
    * https://github.com/jenetics/jenetics/issues/168: Remove dependency to `java.desktop` module.
    * https://github.com/jenetics/jenetics/issues/169: Describe how to configure (μ, λ) and (μ + λ) Evolution Strategies in manual.
    * https://github.com/jenetics/jenetics/issues/177: Additional 'Seq' conversion functions:
        * Seq.asISeq()
        * Seq.asMSeq()
    * https://github.com/jenetics/jenetics/issues/182: Rename build script to default names. All build scripts are now named `build.gradle`.
    * https://github.com/jenetics/jenetics/issues/188: Additional `Engine.Builder` methods
        * Engine.Builder.survivorsSize(int)
        * Engine.Builder.offspringSize(int)
        * Engine.Builder.survivorsFraction(double)
    * https://github.com/jenetics/jenetics/issues/189: `TruncationSelector` is now able to globally limit best selected individuals. This is used for (μ, λ) and (μ + λ) Evolution Strategies.
    * https://github.com/jenetics/jenetics/issues/197: Improve CPU utilization for long running fitness functions. The original concurrent fitness function evaluation where assumed to be quite *fast*.

Jenetics-3.7.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/127: Change the maven group and artifact ID from `org.bitbucket:org.jenetics` to `io.jenetics:jenetics`.
    * https://github.com/jenetics/jenetics/issues/142: Jenetics now compiles without warnings with Java 9 EA.
    * https://github.com/jenetics/jenetics/issues/145: Add additional `Engine.stream(...)` and `Engine.iterator(...)` methods:
        * stream(Iterable<Genotype<G>> genotypes)
        * stream(Iterable<Genotype<G>> genotypes, long generation)
        * stream(EvolutionResult<G, C> result)
        * iterator(Iterable<Genotype<G>> genotypes, long generation)
        * iterator(Population<G, C> population)
        * iterator(EvolutionResult<G, C> result)
    * https://github.com/jenetics/jenetics/issues/150: Implement fitness convergence termination strategy.
    * https://github.com/jenetics/jenetics/issues/152: Remove `hashCode` and replace `equals` method with `sameState(T)` for mutable objects.
    * https://github.com/jenetics/jenetics/issues/156: Implementation of an UniformCrossover.
    * https://github.com/jenetics/jenetics/issues/162: Update and improve User's Manual.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/143: Fix serialization of `EvolutionResult` class.
    * https://github.com/jenetics/jenetics/issues/146: NPE in `EvolutionResult.toBestEvolutionResult()` when collecting empty `EvolutionStream`s.
    * https://github.com/jenetics/jenetics/issues/159: The _User's Manual_ build fails for [Lyx](http://www.lyx.org/) version 2.2.2.


Jenetics-3.6.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/114: `Alterer` implementations are now able to handle `Chromosome`s of different length.
    * https://github.com/jenetics/jenetics/issues/103: Add `MSeq.sort` method.
    * https://github.com/jenetics/jenetics/issues/135: Add `Codec.decode(Genotype)` default method.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/129: Fix Javadoc encoding.

- Updates
    * https://github.com/jenetics/jenetics/issues/134: Update Gradle to 3.1.
    * https://github.com/jenetics/jenetics/issues/138: Update TestNG to 6.9.13.

Jenetics-3.5.1

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/111: Dead lock for single-threaded executors.

Jenetics-3.5.0

- Improvement
    * https://github.com/jenetics/jenetics/issues/81: It is now easier to register user-defined JAXB marshallings -- `org.jenetics.util.IO.JAXB.register`
    * https://github.com/jenetics/jenetics/issues/90, [#91](https://github.com/jenetics/jenetics/issues/91): The manual contains now a section where the performance of the `MonteCarloSelector` and an evolutionary `Selector` is compared (fig. 6.8, page 52).
    * https://github.com/jenetics/jenetics/issues/96: Merge branch with incubation module `org.jenetix`, which contains experimental classes.
    * https://github.com/jenetics/jenetics/issues/101: Add manual example for solving the *Rastrigin* function.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/92: Fix example code in user manual.
    * https://github.com/jenetics/jenetics/issues/94: Inconsistent pre-condition check of `Engine.Builder.build` method.
    * https://github.com/jenetics/jenetics/issues/99: `EvolutionResult` was not completely immutable.

Jenetics-3.4.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/68: Improve implementations of 'Seq' interfaces. Note: The changes of this issue changes the Java serialization of the 'Genes' and 'Chromosomes'. 'Gene'/'Chromosomes' which has been serialized with version 3.3 can't be loaded with version 3.4. As a workaround, it is still possible to write the 'Genes'/'Chromosomes' in XML format and load it with version 3.4.
    * https://github.com/jenetics/jenetics/issues/73: Add additional methods to 'Seq' interface: 'Seq.append' and 'Seq.prepend'.
    * https://github.com/jenetics/jenetics/issues/79: Improve evolution performance measuring. Code resides now in (experimental) 'org.jenetics.tool' module.
    * https://github.com/jenetics/jenetics/issues/85: Add support for fixed-sized subsets in 'PermutationChromosome' class.

Jenetics-3.3.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/43: Add _Evolving images_ example.
    * https://github.com/jenetics/jenetics/issues/62: Two or more `Codec` interfaces can be combined into a single one.
    * https://github.com/jenetics/jenetics/issues/66: Add `AnyGene` and `AnyChromosome` for arbitrary allele types.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/52: Immutability of ISeq violated.
    * https://github.com/jenetics/jenetics/issues/55: Fixing example-run script for Mac.

Jenetics-3.2.0

- Improvements
    * https://github.com/jenetics/jenetics/issues/24: Stabilize statistical selector tests.
    * https://github.com/jenetics/jenetics/issues/25: Remove `testng.xml` file. The test classes are now determined automatically.
    * https://github.com/jenetics/jenetics/issues/40: Introduce `Codec` interface for defining problem encodings.
    * Add _Internal_ section in manual, which describes implementation details.

- Bug fixes
    * https://github.com/jenetics/jenetics/issues/33: Selectors must not change the input population. This occasionally caused `ConcurrentModificationException`.  Such selectors are now creating a defensive copy of the input population.
    * https://github.com/jenetics/jenetics/issues/34: `IndexOutOfBoundsException` when selecting populations which are too short.
    * https://github.com/jenetics/jenetics/issues/35: `IndexOutOfBoundsException` when altering populations which are too short.
    * https://github.com/jenetics/jenetics/issues/39: Numerical instabilities of `ProbabilitySelector`.
    * https://github.com/jenetics/jenetics/issues/47: `Engine` deadlock for long running fitness functions.

Jenetics-3.1.0

- Add 'combine' method to 'Quantile' object. This makes the class usable for (parallel) streams.
- Minor code streamlining and bug-fixing.
- Improve termination strategies.
- Add 'EvolutionStream.of' factory method as an alternative way for creating an evolution stream.
- https://github.com/jenetics/jenetics/issues/12: Fix typos in user manual.
- https://github.com/jenetics/jenetics/issues/13: Add link to Javadoc and manual to README file.
- https://github.com/jenetics/jenetics/issues/14: Remove `Serialize` interface from `Gene` and `Chromosome`.
- https://github.com/jenetics/jenetics/issues/16: Make code examples in Javadoc standard conform.
- https://github.com/jenetics/jenetics/issues/17: Improve recombination section in manual.
- https://github.com/jenetics/jenetics/issues/20: Advance `Genotype` validity checks.


Jenetics-3.0.1

- Fixes: * https://github.com/jenetics/jenetics/issues/2
         * https://github.com/jenetics/jenetics/issues/7

Jenetics-3.0.0

- Rewrite of *engine* classes to make use of Java 8 Stream API.

Jenetics-2.0.2

- Stabilization of ProbabilitySelector.probabilities method when minimizing the fitness function.

Jenetics-2.0.1
- Fix bug in ProbabilitySelector class. The inverted probabilities are not correctly calculated when minimizing the fitness function.

Jenetics-2.0.0
- Add IntegerGene/Chromosome classes.
- Remove all deprecated classes and methods.
- Remove dependency to the JScience library.
- All concurrency classes are now internal. GeneticAlgorithm class takes an Executor as additional parameter, which is used for parallelizable code.
- Library can now be downloaded via the maven central repository: `org.bitbucket.fwilhelm:org.jenetics:2.0.0`

Jenetics-1.6.0
- Add JAXB base XML serialization mechanism to the Gene/Chromosome/Genotype/Phenotype classes. Mark the XMLSerializable based XML serialization as deprecated. org.jenetics.util.IO.xml is now deprecated.
- Add Double/Long genes/chromosomes which will replace the Float64/Integer64 genes/chromosomes.
- Generalize the fitness function to 'Function<? super Genotype<G>, ? extends C>' and the fitness scaler to 'Function<? super C, ? extends C>'.

Jenetics-1.5.0
- Minor fixes in Gradle build script.
- Mark some 'arrays' class methods as deprecated.
- Fix/streamline BitChromosome constructors.
- Improve Gradle build scripts.
- Simplify statistics test classes.

Jenetics-1.4.1
- Fix bug in ListIterator implementation of the 'Seq' classes.

Jenetics-1.4.0
- Performance improvements of 'BitChromosome' class.
- Add method 'BitChromosome.bitCount()'.
- Mark 'arrays.subset' methods as deprecated; methods has been moved to 'org.jenetics.util.math' class.
- Improve Gradle build scripts.
- Change license from LGPL to Apache 2.0.

Jenetics-1.3.0
- Add abstract 'Random64' class, respectively make it public.
- Mark 'object.nonNull' methods as deprecated; functionality is now available in 'java.util.Objects.requireNonNull'.
- Mark 'arrays.indexWhere' methods as deprecated.
- Mark method 'object.str(Object)' as deprecated.
- Mark method 'object.str(byte[])' as deprecated; functionality has moved to 'bit.toString(byte[])'.
- Mark method 'math.min/max' as deprecated; functionality has moved to 'math.statistics' class.
- Mark method 'math.sum' as deprecated; functionality has moved to 'math.statistics' class.
- Mark 'arrays.foreach' method as deprecated. Replaced by 'arrays.forEach'.
- Mark 'Seq.forall' method as deprecated. Replaced by 'Seq.forAll'.
- Mark 'Seq.foreach' method as deprecated. Replaced by 'Seq.forEach'.
- Mark non-array methods in 'arrays' class as deprecated.
- Mark 'arrays.permutation' methods as deprecated.
- Add 'Array.shuffle()' method.
- Fix thread-safe version of the 'LCG64ShiftRandom' class.
- Implement 'Comparable' interface for 'EnumGene'.
- Add Array boxing/unboxing methods for short/Short.
- Needed Gradle version (for building the library) is now 1.6.

Jenetics-1.2.0
- Marking some Array constructors as deprecated.
- Add some additional random helper functions.
- Implement MultiplePointCrossover class.
- Some code streamlining.
- Prepare Selectors for parallelization.
- The 'org.jenetics' project is now an OSGi module.

Jenetics-1.1.1
- Fix bug in SinglePointCrossover, will just swap the whole Genotypes.

Jenetics-1.1.0
- Add 'LCG64ShiftRandom' PRNG.
- Speedup of 'IndexStream.Random' class. Uses internally now int values instead of doubles.
- Add 'IndexStream.foreach' method.
- Some minor code improvements.
- Preparation for converting Jenetics into OSGi modules.
- Switch build system from 'Ant' to 'Gradle'.
- Switch SCM from 'Subversion' to 'Mercurial'.
- Update documentation; describing new repository.

Jenetics-1.0.1
- Fix bug in RouletteWheelSelector. The selection probabilities was not
  correctly calculated: https://sourceforge.net/apps/trac/jenetics/ticket/50

Jenetics-1.0
- Rename 'RandomRegistry.setDefault()' method to 'RandomRegistry.reset()'.
- Rename 'MappableAccumulator' to 'MappedAccumulator'.
- Optimize ProbabilitySelector. The selection complexity is now O(n + log(n)),
  instead of O(n^2).
- Remove NumberGene.asFactory method; no longer needed.
- Rename method MSeq.fill(T[]) to MSeq.setAll(T[]).
- Rename method MSeq.fill(Iterator<T>) to MSeq.setAll(Iterator<T>).
- Rename method MSeq.fill(T) to MSeq.setAll(T).
- Add org.jenetics.util.Seq.forall(Function) method.
- Rename org.jenetics.util.Seq.indexOf(Function) to Seq.indexWhere(Function).
- Rename org.jenetics.util.Seq.lastIndexOf(Function) to Seq.lastIndexWhere(Function).
- Remove org.jenetics.util.CompositeFunction. Functionality moved to
  org.jenetics.util.functions object.
- Add Ant to build libraries.
- Rename org.jenetics.util.CharSet to org.jenetics.util.CharSeq.
- Some javadoc fixes.

Jenetics-0.9.0.0
- Rename org.jenetics.Until class to org.jenetics.termination.
- Remove ConstantFitnessFunction.
- Mark GeneticAlgorithm.addAlterer(Alterer<G>) method as deprecated.
- Add GeneticAlgorithm.setAlterers(final Alterer<G>) method.
- Add GeneticAlgorithm.setup(Collection<Genotype<G>>) method.
- Rename Recombinator.recombinate to Recombinator.recombine.
- Add IO.read methods without Class argument.
- Rename Recombination to Recombinator.
- Rename Array.append methods to Array.add.
- Add an 'IO' class with IO helper methods.
- Remove EnumGene, can be replaced by Integer64Gene.
- Update JScience library from 4.3 to 4.3.1.
- Simplify 'Accumulator' class hierarchy. Remove 'AdaptableAccumulator' and
  rename 'AbstractAccumulator' to 'MappableAccumulator'.
- Convert BitChromosome.valueOf() to constructors.
- Remove GeneticAlgorithm.valueOf methods. They are no longer needed due to the
  extended type inference capabilities of Java 7 (diamond operator <>).
- Move the static 'concurrency' methods from the 'GeneticAlgorithm' class to a
  new 'Concurrency' class.
- The new org.jenetics.util.Function interfaces replaces the FitnessFunction,
  Predicate and Converter interface.
- Convert source to Java 7.

Jenetics-0.8.1.0
- New name schema for 'utility' classes which only contains static methods. Such
  classes are now lower case.
- Cleanup utility classes is org.jenetics.util package.
- Remove org.jenetics.util.IOUtils class.
- Fix methods in 'org.jenetics.util.bit' class (former 'org.jenetics.util.BitUtils'
  class).
- Improve Population.sort() method
- Cleanup of 'org.jenetics.util' package.
- Improve 'isValid' implementation of Gene and Chromosomes
- Additional Selector tests.
- Simplify CharacterChromosome construction

Jenetics-0.8.0.0
- Fix PartiallyMatchedCrossover.crossover() method. The method doesn't perform
  any crossover.
- Add Array.sort() methods.
- Add performance tests.
- Rename the Array.seal() method to Array.toISeq() and remove the Array.isSealed()
  method.
- Add new TestNG version 6.0.
- The EvaluatorRegistry is no longer used. Only the GA directly was using it, so
  remove the registry and add the Evaluator as member to the GA.
- Rename Genotype.toArray to Genotype.toSeq and Chromosome.toArray to
  Chromosome.toSeq.
- Add interfaces Seq, ISeq and MSeq to make the (im)mutable state of the Array
  class more explicit.
- Making org.jenetics.Statisitcs.Builder constructor protected and add static
  factory method which creates an new builder instance.
- Change the signature of the Statistics.Calculator.evaluate method to work with
  'Iterable<? extends Phenotype<G, C>>' for the population, instead of a
  'List<? extends Phenotype<G, C>>'.
- Improved tests and fixes of found bugs.
- Making all gene implementations final (BitGene, CharacterGene, EnumGene,
  Float64Gene, Integer64Gene).
- Making the classes org.jenetics.Genotype and org.jenetics.Phenotype final.
- Remove deprecated field org.jenetics.Mutator._mutations.

Jenetics-0.7.0.0
- Change the signature of the org.jenetics.Statistics.Calculator.evaluate
  methods so that it returns a Statistics.Builder instead of a Statistics object.
- Add builder classes for Statistics and NumberStatistics classes.
- Rename org.jenetics.util.TransitiveConverter to
  org.jenetics.util.CompositeConverter.
- Fix documentation and behavior of org.jenetics.GaussianMutator class.
- Fix the org.jenetics.Mutator class. The mutation probability is (now) the
  probability that a given gene is mutated. (Should have been always the case.)
- Add org.jenetics.stat.NormalDistribution class for creating statistical tests
  for the org.jenetics.Mutator class.
- The org.jenetics.Alterer.alter method now returns the number of altered genes.
- Refactoring: Move Accumulators.Variance and Accumulators.Mean class to
  org.jenetics.stat package.
- Create org.jenetics.stat package.
- Change type signature from 'C extends Comparable<C>' to
  'C extends Comparable<? super C>' for all classes.
- Add histogram accumulator (org.jenetics.util.Accumulators.Histogram).
- Add the 'mixin' org.util.AdaptableAccumulator class.
- Remove Genotype.valueOf(Genotype) method since the Genotype class is is
  immutable and no copy factory method is needed.
- Remove ChromosomeFactory interface.
- Add 'toString' method for all classes.
- Remove deprecated methods in IOUtils class.

Jenetics-0.6.1.0
- Selectors and Alterers are no longer Serializable.
- Implement readObject and writeObject methods in gene and chromosome
  implementations.
- Making CharSet class final.
- Fixing bug in the ArrayUtils.sort(Array) method. This method doesn't sort
  Arrays created with Array.subArray not the right way.
- Fixing bug in SinglePointCrossover class. It was only a 'half' crossover
  performed.
- Add org.jenetics.util.Array.subArray(int) method.
- Add org.jenetics.util.Array.map(Converter) method.
- Change the method signature of the org.jenetics.utils.IOUtils.writeXXX methods.
  Now the parameter order is <object>, <target>.
- Add org.jenetics.utils.Array.toString(String, String, String) method.

Jenetics-0.6.0.0
- Change structure to Maven standard directory layout.
- BitChromosome implements now org.jscience.mathematics.number.Number<BitChromosome>
  instead of org.jscience.mathematics.number.Number<LargeInteger>.
- Add BitChromosome.invert() method.
- Fixing bug in CharSet class. The constructor CharSet(String) now creates
  a distinct CharSet.
- Fixing bug in Array.equals(Object) method.
- Add Array.fill(Factory) method.
- Jenetics now allows fitness minimization.

Jenetics-0.5.1.0
- Add org.jenetics.util.Predicates which contains some general purpose predicates
  like Not, And, Or, Nil.
- Add incremental Quantile class.
- Add ConverterAdapter class.
- Removed Genotype.chromosomes() method. Use Genotype.length() instead.
- Add Accumulator classes for statistics calculation.
- Rename org.jenetics.utils.Serializer to org.jenetics.utils.IOUtils.
- Change method signature from ArrayUtils.foreach(Collection) to
  ArrayUtils.foreach(Iterable).
- Add Array.toArray() and Array.toArray(Object[]) methods.
- Add 'divide' method to Float64Gene and Integer64Gene.
- Add factory methods CharSet.valueOf(CharSequence) and CharSet.valueOf(char, char).

Jenetics-0.5.0.0
- Rename Validator.notNull() to Validator.nonNull(). It's the same name as in the
  new Objects.nonNull() method in Java 1.7.
- Remove the org.jenetics.Propability class. It's not worth the effort.
- Refactoring of the Alterer class. The Alterer is now an interface with one
  "alter" method. To combine different alterers to one alterer you have to use
  the CompositeAlterer class.
- Rename Mutation to Mutator.
- Rename DoubleGene(Chromosome) to Float64Gene(Chromosome).
- Rename IntegerGene(Chromosome) to Integer64Gene(Chromosome).
- Rename org.jenetics.util.XMLSerializer to org.jenetics.util.Serializer.
- Move Mean class from org.jenetics to org.jenetics.util package.
- Rename PowerScaler to ExponentialScaler.
- Add new selector, MonteCarloSelector. This selector can be used to evaluate
  the performance of an other selector.
- Rename GeneticAlgorithm.getBestStatistic() method to
  GeneticAlgorithm.getBestStatistics()
- Change org.jenetics.util.Timer to nano second resolution.
- Rename method Statistics.getTimes() to Statistics.getTime().
- Replace the Statistics.Time properties with "final" javolution.lang.References.
  Instead of statistics.getTimes().getAlterTime() you write statistics.getTimes().alter.get().
- Adding fork-join library from Doug Lea and ForkJoinEvaluator.
- Adding UmlGraph for javadoc generation.
- Making the Array class cloneable.
- Fix external javadoc references in build script.
- The characters which are used by the CharacterGene can now be changed.
- Adding adapter class for jscience Function object.
- Adding method getParallelTasks to Evaluator interface.
- The GeneticAlgorithm.getLock() method now returns a fair lock.
- Make the static helper method ArrayUtils.asList() a member method of the Array
  class.
- Make the Array class Serializable.
- Making the StatisticsCalculator a static inner class of the Statistics.

Jenetics-0.4.0.1
- Fix bug in the GeneticAlgoritm.setPopulation/setGenotypes function. The
  fitness scaler was not set.
- The examples are packed in separate jar file (Jenetics-examples-<version>.jar).
- Some Fixing javadoc.

Jenetics-0.4.0.0
- Remove the survivor fraction probability from the GA. This can lead to
  inconsistencies with the offspring fraction. The survivor fraction is deduced
  from the offspring fraction (sf := 1 - of).
- Adding additional example.
- Removing the static factory methods from the Array class.
- Refactoring GA statistic classes.
- Adding TruncationSelector.
- Adding SwapMutation class, needed for TSP (and other combinatorial) problem.
- Rename NumberGene.getMinValue() to NumberGene.getMaxValue() to
  NumberGene.getMin() and NumberGene.getMax().
- Remove the mutation method from the Chromosomes interface. The mutation is
  solely done by the Mutation class. This requires a new method in the Gene
  interface, Gene.newInstance(). To not be forced to cast the newly generated
  gene to its concrete type, an additional type parameter has been added to the
  Gene interface. As side effect, no @SuppressWarnin annotation are needed.
- Adding GaussianMutation class.
- Fixing Mutation class. After an previous refactoring no mutation was performed.
- Fixing mutation probability calculation in Mutation class.
- Making mutation a little bit faster.
- The methods of the Array class throw an ArrayIndexOutOfBoundsException instead
  of an IndexOutOfBoundsException.
- Fixing again bugs in the Array(Utils) class concerning the sealed state.
- Adding ArrayUtils.sealedArray() method.
- Rename Chromosome.getGenes() to Chromosome.toArray().
- Making all method parameters final.

Jenetics-0.3.2.1
- Adding and extending javadoc comments.
- Finish NumericStatistic/Calculator implementation.
- Fixing minor flaws of the Arrays sealed state.
- Adding method Array.subArray(int, int).
- Generalize the method Array.clear() to Array.fill(T value).

Jenetics-0.3.2.0
- The PropabilitySelector no longer sorts the population before calling the
  ProbabilitySelector.probabilities() method. The subclass must sort the
  population if needed.
- Move Verifiable interface to util package.
- Change signature of the Alterer.alter(Population, int) method. Adding the
  generation of the altered phenotype.
- Add new abstract Alterer class Recombination.
- Move RandomRegistry into org.jenetics.util package.
- Add org.jenetics.util.EvaluatorRegistry class.
- Parallelize the recombination in the Recombination class.

Jenetics-0.3.1.0
- Deleting ConcurrentStatisticCalculator
- Adding concurrence support on the level of the fitness calculation of the
  phenotypes of the population. This will the job of the
  (Concurrent)Evaluator.
- CharacterChromosome implements java.lang.CharSequence interface.
- Adding method org.jenetics.util.Array.subArray(start, end).
- Adding timer which measures the time spend for selecting, altering and
  calculating the fitness of a population.

Jenetics-0.3.0.0
- Adding javadoc to exported zip file.
- Moving classes
     * Array
     * ArrayIterator
     * ArrayUtils
     * BitUtils
     * Probability
     * Validator
  into new org.jenetics.util package.
- Changing interface 'FitnessFunction'. It converts a given Genotyp<G> to an
  (more general) java.lang.Comparable instead of a double value. An additional
  generic parameter (C extends Comparable<C>) was therefor introduced in the
  FitnessScaler, Phenotype, Population, Selector and GeneticAlgorithm class.
- Adding NumericStatistic and NumericStatisticCalculator. Move functionality
  from old Statistic class into the new NumericStatistic class.
- Some additional helper methods in the ArrayUtils class.
- Remove method CharacterGene.getCharacter(), use CharacterGene.getAllele()
  instead.
- adding interface org.jenetics.util.Copyable.
- Streamline XML-Serialization.
- Streamline toString methods and examples.

Jenetics-0.2.0.0
- Removing Randomizable interface.
- Changing the template method return value of the
  ProbabilitySelector.probabilities(Population<T>,int) from
  Probabilities[] to double[].
- Replace array types (e.g. IntegerGene[]) with Array<T> class
  (e.g. Array<IntegerGene>). This moves all the 'unchecked' stuff in the new
  Array class.
- Only add valid phenotypes to surviving phenotypes.
- Caching the isValid value in AbstractChromosome and Genotype.
- Rename util class org.jenetics.Arrays to org.jenetics.ArrayUtils.
- Adding StatisticTest class.
- Adding the (shortcut)method Genotype.getGene()
- Adding the method Chromosome.getGene() to the Chromosome interface.
- Adding the ConcurrentStatisticCalculator class.
- Making the StatisticsCalculator class public.

Jenetics-0.1.0.4
- Adding @Override annotation where possible.
- The factory method IntegerGene.valueOf(long min, long max) and
  the DoubleGene.valueOf(double min, double max) now creates a Gene with a random value
  within the given range. Adding comments to this methods.

Jenetics-0.1.0.3
- Using javolution.context.LocalContext.Reference in RandomRegistry.
- New version of the private PermutationChromosome.randomize method.
- Adding private helper class Arrays.

